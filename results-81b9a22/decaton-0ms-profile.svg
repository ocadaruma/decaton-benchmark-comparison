<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (455 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.22%)</title><rect x="10.0" y="1251.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.22%)</title><rect x="12.6" y="1251.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.22%)</title><rect x="12.6" y="1235.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.22%)</title><rect x="12.6" y="1219.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.22%)</title><rect x="12.6" y="1203.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.22%)</title><rect x="12.6" y="1187.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (117 samples, 25.71%)</title><rect x="15.2" y="1251.0" width="303.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.2" y="1262.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (117 samples, 25.71%)</title><rect x="15.2" y="1235.0" width="303.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.2" y="1246.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.88%)</title><rect x="17.8" y="1219.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.8" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.88%)</title><rect x="17.8" y="1203.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$276/2082117538.accept (4 samples, 0.88%)</title><rect x="17.8" y="1187.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.88%)</title><rect x="17.8" y="1171.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.88%)</title><rect x="17.8" y="1155.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.66%)</title><rect x="20.4" y="1139.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.22%)</title><rect x="28.2" y="1219.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.22%)</title><rect x="28.2" y="1203.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.22%)</title><rect x="28.2" y="1187.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.22%)</title><rect x="28.2" y="1171.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.22%)</title><rect x="28.2" y="1155.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.22%)</title><rect x="28.2" y="1139.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.22%)</title><rect x="28.2" y="1123.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.22%)</title><rect x="28.2" y="1107.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.22%)</title><rect x="28.2" y="1091.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (57 samples, 12.53%)</title><rect x="30.7" y="1219.0" width="147.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.7" y="1230.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$275/983654253.accept (56 samples, 12.31%)</title><rect x="30.7" y="1203.0" width="145.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.7" y="1214.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (56 samples, 12.31%)</title><rect x="30.7" y="1187.0" width="145.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.7" y="1198.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (23 samples, 5.05%)</title><rect x="38.5" y="1171.0" width="59.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.5" y="1182.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (23 samples, 5.05%)</title><rect x="38.5" y="1155.0" width="59.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.5" y="1166.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (23 samples, 5.05%)</title><rect x="38.5" y="1139.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.5" y="1150.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (23 samples, 5.05%)</title><rect x="38.5" y="1123.0" width="59.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.5" y="1134.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (23 samples, 5.05%)</title><rect x="38.5" y="1107.0" width="59.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.5" y="1118.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (23 samples, 5.05%)</title><rect x="38.5" y="1091.0" width="59.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.5" y="1102.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (2 samples, 0.44%)</title><rect x="38.5" y="1075.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.22%)</title><rect x="38.5" y="1059.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.22%)</title><rect x="38.5" y="1043.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.22%)</title><rect x="38.5" y="1027.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.22%)</title><rect x="38.5" y="1011.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.22%)</title><rect x="41.1" y="1059.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.22%)</title><rect x="41.1" y="1043.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.22%)</title><rect x="41.1" y="1027.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.22%)</title><rect x="41.1" y="1011.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.1" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.22%)</title><rect x="41.1" y="995.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.1" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.22%)</title><rect x="41.1" y="979.0" width="2.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="44.1" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.22%)</title><rect x="41.1" y="963.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="44.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 4.62%)</title><rect x="43.7" y="1075.0" width="54.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.7" y="1086.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 4.62%)</title><rect x="43.7" y="1059.0" width="54.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.7" y="1070.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (18 samples, 3.96%)</title><rect x="51.5" y="1043.0" width="46.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.5" y="1054.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.44%)</title><rect x="90.4" y="1027.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.4" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.22%)</title><rect x="95.6" y="1027.0" width="2.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="98.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (15 samples, 3.30%)</title><rect x="98.2" y="1171.0" width="38.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.2" y="1182.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 2.20%)</title><rect x="111.1" y="1155.0" width="26.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="114.1" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.22%)</title><rect x="134.5" y="1139.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="137.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.22%)</title><rect x="137.1" y="1171.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.22%)</title><rect x="137.1" y="1155.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.1" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.22%)</title><rect x="137.1" y="1139.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (10 samples, 2.20%)</title><rect x="139.7" y="1171.0" width="25.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.7" y="1182.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.20%)</title><rect x="139.7" y="1155.0" width="25.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="142.7" y="1166.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.88%)</title><rect x="150.0" y="1139.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.22%)</title><rect x="150.0" y="1123.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.22%)</title><rect x="150.0" y="1107.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.0" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.22%)</title><rect x="150.0" y="1091.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.22%)</title><rect x="152.6" y="1123.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.44%)</title><rect x="155.2" y="1123.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="158.2" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.44%)</title><rect x="160.4" y="1139.0" width="5.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="163.4" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.88%)</title><rect x="165.6" y="1171.0" width="10.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="168.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.22%)</title><rect x="176.0" y="1203.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.22%)</title><rect x="176.0" y="1187.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 11.87%)</title><rect x="178.6" y="1219.0" width="140.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="1230.0">org/apache/kafka/c..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 11.21%)</title><rect x="178.6" y="1203.0" width="132.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="1214.0">org/apache/kafka..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 6.81%)</title><rect x="178.6" y="1187.0" width="80.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="1198.0">org/apach..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.32%)</title><rect x="178.6" y="1171.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.32%)</title><rect x="178.6" y="1155.0" width="15.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.44%)</title><rect x="178.6" y="1139.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.44%)</title><rect x="178.6" y="1123.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.44%)</title><rect x="178.6" y="1107.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.44%)</title><rect x="178.6" y="1091.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.44%)</title><rect x="178.6" y="1075.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.44%)</title><rect x="178.6" y="1059.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.44%)</title><rect x="178.6" y="1043.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.44%)</title><rect x="178.6" y="1027.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.44%)</title><rect x="178.6" y="1011.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.6" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.44%)</title><rect x="178.6" y="995.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.6" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.44%)</title><rect x="178.6" y="979.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.44%)</title><rect x="178.6" y="963.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.6" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.44%)</title><rect x="178.6" y="947.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.6" y="958.0"></text>
</g>
<g>
<title>__read (2 samples, 0.44%)</title><rect x="178.6" y="931.0" width="5.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="181.6" y="942.0"></text>
</g>
<g>
<title>system_call_fastpath (2 samples, 0.44%)</title><rect x="178.6" y="915.0" width="5.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="181.6" y="926.0"></text>
</g>
<g>
<title>sys_read (2 samples, 0.44%)</title><rect x="178.6" y="899.0" width="5.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="181.6" y="910.0"></text>
</g>
<g>
<title>vfs_read (2 samples, 0.44%)</title><rect x="178.6" y="883.0" width="5.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="181.6" y="894.0"></text>
</g>
<g>
<title>do_sync_read (2 samples, 0.44%)</title><rect x="178.6" y="867.0" width="5.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="181.6" y="878.0"></text>
</g>
<g>
<title>sock_aio_read (2 samples, 0.44%)</title><rect x="178.6" y="851.0" width="5.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="181.6" y="862.0"></text>
</g>
<g>
<title>sock_aio_read.part.9 (2 samples, 0.44%)</title><rect x="178.6" y="835.0" width="5.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="181.6" y="846.0"></text>
</g>
<g>
<title>inet_recvmsg (2 samples, 0.44%)</title><rect x="178.6" y="819.0" width="5.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="181.6" y="830.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 0.44%)</title><rect x="178.6" y="803.0" width="5.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="181.6" y="814.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.22%)</title><rect x="181.2" y="787.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="184.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$272/1229177378.shouldBlock (1 samples, 0.22%)</title><rect x="183.8" y="1139.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.22%)</title><rect x="183.8" y="1123.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.22%)</title><rect x="183.8" y="1107.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.22%)</title><rect x="183.8" y="1091.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.22%)</title><rect x="183.8" y="1075.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.22%)</title><rect x="183.8" y="1059.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.22%)</title><rect x="183.8" y="1043.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.22%)</title><rect x="183.8" y="1027.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.22%)</title><rect x="183.8" y="1011.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.22%)</title><rect x="183.8" y="995.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.22%)</title><rect x="183.8" y="979.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.22%)</title><rect x="183.8" y="963.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.22%)</title><rect x="186.4" y="1139.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.22%)</title><rect x="186.4" y="1123.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.22%)</title><rect x="186.4" y="1107.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.22%)</title><rect x="186.4" y="1091.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.22%)</title><rect x="186.4" y="1075.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.22%)</title><rect x="186.4" y="1059.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.22%)</title><rect x="186.4" y="1043.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 0.44%)</title><rect x="188.9" y="1139.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (2 samples, 0.44%)</title><rect x="188.9" y="1123.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (2 samples, 0.44%)</title><rect x="188.9" y="1107.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (2 samples, 0.44%)</title><rect x="188.9" y="1091.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="191.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 0.44%)</title><rect x="188.9" y="1075.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 0.44%)</title><rect x="188.9" y="1059.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (2 samples, 0.44%)</title><rect x="188.9" y="1043.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (2 samples, 0.44%)</title><rect x="188.9" y="1027.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="191.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (2 samples, 0.44%)</title><rect x="188.9" y="1011.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.9" y="1022.0"></text>
</g>
<g>
<title>InlineCacheBuffer (1 samples, 0.22%)</title><rect x="188.9" y="995.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="191.9" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.22%)</title><rect x="191.5" y="995.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (25 samples, 5.49%)</title><rect x="194.1" y="1171.0" width="64.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.1" y="1182.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 5.49%)</title><rect x="194.1" y="1155.0" width="64.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.1" y="1166.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (23 samples, 5.05%)</title><rect x="194.1" y="1139.0" width="59.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.1" y="1150.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (23 samples, 5.05%)</title><rect x="194.1" y="1123.0" width="59.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.1" y="1134.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 2.86%)</title><rect x="194.1" y="1107.0" width="33.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="197.1" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.22%)</title><rect x="209.7" y="1091.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.22%)</title><rect x="209.7" y="1075.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.22%)</title><rect x="209.7" y="1059.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 1.32%)</title><rect x="212.3" y="1091.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 1.32%)</title><rect x="212.3" y="1075.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 1.32%)</title><rect x="212.3" y="1059.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 1.32%)</title><rect x="212.3" y="1043.0" width="15.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 1.32%)</title><rect x="212.3" y="1027.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 1.32%)</title><rect x="212.3" y="1011.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 1.32%)</title><rect x="212.3" y="995.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 2.20%)</title><rect x="227.8" y="1107.0" width="26.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.8" y="1118.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 2.20%)</title><rect x="227.8" y="1091.0" width="26.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.8" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 2.20%)</title><rect x="227.8" y="1075.0" width="26.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.8" y="1086.0">o..</text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 2.20%)</title><rect x="227.8" y="1059.0" width="26.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.8" y="1070.0">j..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.22%)</title><rect x="248.6" y="1043.0" width="2.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="251.6" y="1054.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.22%)</title><rect x="251.2" y="1043.0" width="2.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="254.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.22%)</title><rect x="253.8" y="1139.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.22%)</title><rect x="253.8" y="1123.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.22%)</title><rect x="253.8" y="1107.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.22%)</title><rect x="253.8" y="1091.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.22%)</title><rect x="256.4" y="1139.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.22%)</title><rect x="256.4" y="1123.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.22%)</title><rect x="256.4" y="1107.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.4" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.22%)</title><rect x="256.4" y="1091.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.22%)</title><rect x="256.4" y="1075.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.22%)</title><rect x="259.0" y="1187.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.22%)</title><rect x="259.0" y="1171.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.22%)</title><rect x="259.0" y="1155.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.22%)</title><rect x="259.0" y="1139.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.22%)</title><rect x="259.0" y="1123.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.22%)</title><rect x="259.0" y="1107.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.22%)</title><rect x="259.0" y="1091.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (16 samples, 3.52%)</title><rect x="261.6" y="1187.0" width="41.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.6" y="1198.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (11 samples, 2.42%)</title><rect x="261.6" y="1171.0" width="28.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.6" y="1182.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.44%)</title><rect x="261.6" y="1155.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.44%)</title><rect x="261.6" y="1139.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.44%)</title><rect x="261.6" y="1123.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.44%)</title><rect x="261.6" y="1107.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (2 samples, 0.44%)</title><rect x="261.6" y="1091.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.44%)</title><rect x="261.6" y="1075.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.44%)</title><rect x="261.6" y="1059.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (2 samples, 0.44%)</title><rect x="261.6" y="1043.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (2 samples, 0.44%)</title><rect x="261.6" y="1027.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (2 samples, 0.44%)</title><rect x="261.6" y="1011.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (2 samples, 0.44%)</title><rect x="261.6" y="995.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.44%)</title><rect x="261.6" y="979.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.6" y="990.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (2 samples, 0.44%)</title><rect x="261.6" y="963.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.6" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.22%)</title><rect x="261.6" y="947.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.6" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.22%)</title><rect x="261.6" y="931.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decode (1 samples, 0.22%)</title><rect x="261.6" y="915.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.6" y="926.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.onMalformedInput (1 samples, 0.22%)</title><rect x="264.2" y="947.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.2" y="958.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.implOnMalformedInput (1 samples, 0.22%)</title><rect x="264.2" y="931.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.22%)</title><rect x="266.7" y="1155.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.22%)</title><rect x="266.7" y="1139.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.22%)</title><rect x="266.7" y="1123.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (8 samples, 1.76%)</title><rect x="269.3" y="1155.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (8 samples, 1.76%)</title><rect x="269.3" y="1139.0" width="20.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.66%)</title><rect x="269.3" y="1123.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.66%)</title><rect x="269.3" y="1107.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.66%)</title><rect x="269.3" y="1091.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.66%)</title><rect x="269.3" y="1075.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.66%)</title><rect x="269.3" y="1059.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.66%)</title><rect x="269.3" y="1043.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.3" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.66%)</title><rect x="269.3" y="1027.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.66%)</title><rect x="269.3" y="1011.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (3 samples, 0.66%)</title><rect x="269.3" y="995.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (3 samples, 0.66%)</title><rect x="269.3" y="979.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.3" y="990.0"></text>
</g>
<g>
<title>__read (3 samples, 0.66%)</title><rect x="269.3" y="963.0" width="7.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="272.3" y="974.0"></text>
</g>
<g>
<title>system_call_fastpath (2 samples, 0.44%)</title><rect x="271.9" y="947.0" width="5.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="274.9" y="958.0"></text>
</g>
<g>
<title>sys_read (2 samples, 0.44%)</title><rect x="271.9" y="931.0" width="5.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="274.9" y="942.0"></text>
</g>
<g>
<title>fput (1 samples, 0.22%)</title><rect x="271.9" y="915.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="274.9" y="926.0"></text>
</g>
<g>
<title>vfs_read (1 samples, 0.22%)</title><rect x="274.5" y="915.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="277.5" y="926.0"></text>
</g>
<g>
<title>do_sync_read (1 samples, 0.22%)</title><rect x="274.5" y="899.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="277.5" y="910.0"></text>
</g>
<g>
<title>sock_aio_read (1 samples, 0.22%)</title><rect x="274.5" y="883.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="277.5" y="894.0"></text>
</g>
<g>
<title>sock_aio_read.part.9 (1 samples, 0.22%)</title><rect x="274.5" y="867.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="277.5" y="878.0"></text>
</g>
<g>
<title>inet_recvmsg (1 samples, 0.22%)</title><rect x="274.5" y="851.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="277.5" y="862.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.22%)</title><rect x="274.5" y="835.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="277.5" y="846.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.22%)</title><rect x="274.5" y="819.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="277.5" y="830.0"></text>
</g>
<g>
<title>tcp_send_ack (1 samples, 0.22%)</title><rect x="274.5" y="803.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="277.5" y="814.0"></text>
</g>
<g>
<title>tcp_transmit_skb (1 samples, 0.22%)</title><rect x="274.5" y="787.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="277.5" y="798.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.22%)</title><rect x="274.5" y="771.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="277.5" y="782.0"></text>
</g>
<g>
<title>ip_local_out_sk (1 samples, 0.22%)</title><rect x="274.5" y="755.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="277.5" y="766.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.22%)</title><rect x="274.5" y="739.0" width="2.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="277.5" y="750.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.22%)</title><rect x="274.5" y="723.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="277.5" y="734.0"></text>
</g>
<g>
<title>local_bh_enable (1 samples, 0.22%)</title><rect x="274.5" y="707.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="277.5" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.22%)</title><rect x="274.5" y="691.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="277.5" y="702.0"></text>
</g>
<g>
<title>do_softirq (1 samples, 0.22%)</title><rect x="274.5" y="675.0" width="2.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="277.5" y="686.0"></text>
</g>
<g>
<title>call_softirq (1 samples, 0.22%)</title><rect x="274.5" y="659.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="277.5" y="670.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.22%)</title><rect x="274.5" y="643.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="277.5" y="654.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.22%)</title><rect x="274.5" y="627.0" width="2.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="277.5" y="638.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.22%)</title><rect x="274.5" y="611.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="277.5" y="622.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.22%)</title><rect x="274.5" y="595.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="277.5" y="606.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.22%)</title><rect x="274.5" y="579.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="277.5" y="590.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.22%)</title><rect x="274.5" y="563.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="277.5" y="574.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.22%)</title><rect x="274.5" y="547.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="277.5" y="558.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.22%)</title><rect x="274.5" y="531.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="277.5" y="542.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.22%)</title><rect x="274.5" y="515.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="277.5" y="526.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.22%)</title><rect x="274.5" y="499.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="277.5" y="510.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.22%)</title><rect x="274.5" y="483.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="277.5" y="494.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.22%)</title><rect x="274.5" y="467.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="277.5" y="478.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.22%)</title><rect x="274.5" y="451.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="277.5" y="462.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.22%)</title><rect x="274.5" y="435.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="277.5" y="446.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.22%)</title><rect x="274.5" y="419.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="277.5" y="430.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.22%)</title><rect x="274.5" y="403.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="277.5" y="414.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.22%)</title><rect x="274.5" y="387.0" width="2.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="277.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (5 samples, 1.10%)</title><rect x="277.1" y="1123.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (5 samples, 1.10%)</title><rect x="277.1" y="1107.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (5 samples, 1.10%)</title><rect x="277.1" y="1091.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (5 samples, 1.10%)</title><rect x="277.1" y="1075.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (5 samples, 1.10%)</title><rect x="277.1" y="1059.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.1" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (5 samples, 1.10%)</title><rect x="277.1" y="1043.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.1" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (5 samples, 1.10%)</title><rect x="277.1" y="1027.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.1" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (5 samples, 1.10%)</title><rect x="277.1" y="1011.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.putBase (1 samples, 0.22%)</title><rect x="279.7" y="995.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (3 samples, 0.66%)</title><rect x="282.3" y="995.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (3 samples, 0.66%)</title><rect x="282.3" y="979.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.3" y="990.0"></text>
</g>
<g>
<title>__writev (2 samples, 0.44%)</title><rect x="282.3" y="963.0" width="5.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="285.3" y="974.0"></text>
</g>
<g>
<title>system_call_fastpath (2 samples, 0.44%)</title><rect x="282.3" y="947.0" width="5.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="285.3" y="958.0"></text>
</g>
<g>
<title>sys_writev (2 samples, 0.44%)</title><rect x="282.3" y="931.0" width="5.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="285.3" y="942.0"></text>
</g>
<g>
<title>vfs_writev (2 samples, 0.44%)</title><rect x="282.3" y="915.0" width="5.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="285.3" y="926.0"></text>
</g>
<g>
<title>do_readv_writev (2 samples, 0.44%)</title><rect x="282.3" y="899.0" width="5.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="285.3" y="910.0"></text>
</g>
<g>
<title>do_sync_readv_writev (2 samples, 0.44%)</title><rect x="282.3" y="883.0" width="5.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="285.3" y="894.0"></text>
</g>
<g>
<title>sock_aio_write (2 samples, 0.44%)</title><rect x="282.3" y="867.0" width="5.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="285.3" y="878.0"></text>
</g>
<g>
<title>inet_sendmsg (1 samples, 0.22%)</title><rect x="284.9" y="851.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="287.9" y="862.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.22%)</title><rect x="284.9" y="835.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="287.9" y="846.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.22%)</title><rect x="284.9" y="819.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="287.9" y="830.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.22%)</title><rect x="284.9" y="803.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="287.9" y="814.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.22%)</title><rect x="284.9" y="787.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="287.9" y="798.0"></text>
</g>
<g>
<title>tcp_transmit_skb (1 samples, 0.22%)</title><rect x="284.9" y="771.0" width="2.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="287.9" y="782.0"></text>
</g>
<g>
<title>convertLongReturnVal (1 samples, 0.22%)</title><rect x="287.5" y="963.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="290.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (5 samples, 1.10%)</title><rect x="290.1" y="1171.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (5 samples, 1.10%)</title><rect x="290.1" y="1155.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (5 samples, 1.10%)</title><rect x="290.1" y="1139.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (5 samples, 1.10%)</title><rect x="290.1" y="1123.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (5 samples, 1.10%)</title><rect x="290.1" y="1107.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (5 samples, 1.10%)</title><rect x="290.1" y="1091.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="293.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (3 samples, 0.66%)</title><rect x="290.1" y="1075.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.22%)</title><rect x="292.7" y="1059.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.22%)</title><rect x="292.7" y="1043.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.22%)</title><rect x="292.7" y="1027.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.22%)</title><rect x="292.7" y="1011.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.22%)</title><rect x="292.7" y="995.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.setLeaderEpochIfExists (1 samples, 0.22%)</title><rect x="295.3" y="1059.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.22%)</title><rect x="295.3" y="1043.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.22%)</title><rect x="295.3" y="1027.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.22%)</title><rect x="295.3" y="1011.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.22%)</title><rect x="297.9" y="1075.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.22%)</title><rect x="297.9" y="1059.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.22%)</title><rect x="297.9" y="1043.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.22%)</title><rect x="297.9" y="1027.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.22%)</title><rect x="297.9" y="1011.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="300.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.22%)</title><rect x="297.9" y="995.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.22%)</title><rect x="300.5" y="1075.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.22%)</title><rect x="300.5" y="1059.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.22%)</title><rect x="300.5" y="1043.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$11.write (1 samples, 0.22%)</title><rect x="300.5" y="1027.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.22%)</title><rect x="300.5" y="1011.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.22%)</title><rect x="300.5" y="995.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.22%)</title><rect x="300.5" y="979.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.5" y="990.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.22%)</title><rect x="300.5" y="963.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.5" y="974.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.22%)</title><rect x="300.5" y="947.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.5" y="958.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.22%)</title><rect x="300.5" y="931.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.5" y="942.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.22%)</title><rect x="300.5" y="915.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.5" y="926.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.22%)</title><rect x="300.5" y="899.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.5" y="910.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.22%)</title><rect x="300.5" y="883.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.66%)</title><rect x="303.1" y="1187.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="306.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.22%)</title><rect x="303.1" y="1171.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.22%)</title><rect x="303.1" y="1155.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.22%)</title><rect x="303.1" y="1139.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.22%)</title><rect x="303.1" y="1123.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.44%)</title><rect x="305.6" y="1171.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.22%)</title><rect x="305.6" y="1155.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$268/1222894808.accept (1 samples, 0.22%)</title><rect x="305.6" y="1139.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.22%)</title><rect x="308.2" y="1155.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (2 samples, 0.44%)</title><rect x="310.8" y="1203.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.8" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.22%)</title><rect x="313.4" y="1187.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="316.4" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.22%)</title><rect x="316.0" y="1203.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="319.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.22%)</title><rect x="316.0" y="1187.0" width="2.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="319.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.run (271 samples, 59.56%)</title><rect x="318.6" y="1251.0" width="702.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.6" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (271 samples, 59.56%)</title><rect x="318.6" y="1235.0" width="702.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.6" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (271 samples, 59.56%)</title><rect x="318.6" y="1219.0" width="702.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.6" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$291/459375460.run (248 samples, 54.51%)</title><rect x="334.2" y="1203.0" width="643.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.2" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$291/459375460.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (248 samples, 54.51%)</title><rect x="334.2" y="1187.0" width="643.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.2" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (248 samples, 54.51%)</title><rect x="334.2" y="1171.0" width="643.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.2" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (246 samples, 54.07%)</title><rect x="334.2" y="1155.0" width="638.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.2" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.22%)</title><rect x="342.0" y="1139.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (91 samples, 20.00%)</title><rect x="344.5" y="1139.0" width="236.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.5" y="1150.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (91 samples, 20.00%)</title><rect x="344.5" y="1123.0" width="236.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.5" y="1134.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (91 samples, 20.00%)</title><rect x="344.5" y="1107.0" width="236.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.5" y="1118.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (91 samples, 20.00%)</title><rect x="344.5" y="1091.0" width="236.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="347.5" y="1102.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (91 samples, 20.00%)</title><rect x="344.5" y="1075.0" width="236.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.5" y="1086.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (91 samples, 20.00%)</title><rect x="344.5" y="1059.0" width="236.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.5" y="1070.0">com/fasterxml/jackson/databind/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (23 samples, 5.05%)</title><rect x="344.5" y="1043.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.5" y="1054.0">com/fa..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.66%)</title><rect x="360.1" y="1027.0" width="7.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="363.1" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.44%)</title><rect x="362.7" y="1011.0" width="5.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="365.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.22%)</title><rect x="367.9" y="1027.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.22%)</title><rect x="367.9" y="1011.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.22%)</title><rect x="367.9" y="995.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.22%)</title><rect x="367.9" y="979.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.22%)</title><rect x="367.9" y="963.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.22%)</title><rect x="367.9" y="947.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.22%)</title><rect x="367.9" y="931.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="370.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (13 samples, 2.86%)</title><rect x="370.5" y="1027.0" width="33.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="373.5" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 2.86%)</title><rect x="370.5" y="1011.0" width="33.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.5" y="1022.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.22%)</title><rect x="380.9" y="995.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.22%)</title><rect x="380.9" y="979.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 1.76%)</title><rect x="383.5" y="995.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 1.76%)</title><rect x="383.5" y="979.0" width="20.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (8 samples, 1.76%)</title><rect x="383.5" y="963.0" width="20.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (63 samples, 13.85%)</title><rect x="404.2" y="1043.0" width="163.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.2" y="1054.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.44%)</title><rect x="412.0" y="1027.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.44%)</title><rect x="412.0" y="1011.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 1.54%)</title><rect x="417.2" y="1027.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.32%)</title><rect x="419.8" y="1011.0" width="15.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.66%)</title><rect x="419.8" y="995.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="422.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.66%)</title><rect x="427.5" y="995.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.66%)</title><rect x="427.5" y="979.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.66%)</title><rect x="427.5" y="963.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.44%)</title><rect x="435.3" y="1027.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.44%)</title><rect x="435.3" y="1011.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (49 samples, 10.77%)</title><rect x="440.5" y="1027.0" width="127.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="443.5" y="1038.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 2.20%)</title><rect x="443.1" y="1011.0" width="25.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="446.1" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.66%)</title><rect x="456.1" y="995.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="459.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.22%)</title><rect x="463.8" y="995.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.22%)</title><rect x="463.8" y="979.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.22%)</title><rect x="463.8" y="963.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="466.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.22%)</title><rect x="466.4" y="995.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (38 samples, 8.35%)</title><rect x="469.0" y="1011.0" width="98.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="472.0" y="1022.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (38 samples, 8.35%)</title><rect x="469.0" y="995.0" width="98.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="472.0" y="1006.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.22%)</title><rect x="469.0" y="979.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="472.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (37 samples, 8.13%)</title><rect x="471.6" y="979.0" width="96.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.6" y="990.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 3.52%)</title><rect x="492.4" y="963.0" width="41.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.4" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.66%)</title><rect x="502.7" y="947.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="505.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 1.98%)</title><rect x="510.5" y="947.0" width="23.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.5" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 1.98%)</title><rect x="510.5" y="931.0" width="23.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.5" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 1.98%)</title><rect x="510.5" y="915.0" width="23.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="513.5" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 1.32%)</title><rect x="518.3" y="899.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="521.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 1.10%)</title><rect x="520.9" y="883.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="523.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.66%)</title><rect x="526.1" y="867.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="529.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.66%)</title><rect x="526.1" y="851.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="529.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 1.32%)</title><rect x="533.9" y="963.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="536.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.66%)</title><rect x="541.6" y="947.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="544.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.66%)</title><rect x="541.6" y="931.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="544.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.66%)</title><rect x="541.6" y="915.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.66%)</title><rect x="541.6" y="899.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 1.10%)</title><rect x="549.4" y="963.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="552.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 1.10%)</title><rect x="549.4" y="947.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 1.10%)</title><rect x="549.4" y="931.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 1.10%)</title><rect x="549.4" y="915.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="552.4" y="926.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 1.10%)</title><rect x="549.4" y="899.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.4" y="910.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.88%)</title><rect x="552.0" y="883.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.0" y="894.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.22%)</title><rect x="559.8" y="867.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="562.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.44%)</title><rect x="562.4" y="963.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="565.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.44%)</title><rect x="562.4" y="947.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="565.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.44%)</title><rect x="562.4" y="931.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="565.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 1.10%)</title><rect x="567.6" y="1043.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="570.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.22%)</title><rect x="567.6" y="1027.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.88%)</title><rect x="570.2" y="1027.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.88%)</title><rect x="570.2" y="1011.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="573.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.88%)</title><rect x="570.2" y="995.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.88%)</title><rect x="570.2" y="979.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (147 samples, 32.31%)</title><rect x="580.5" y="1139.0" width="381.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.5" y="1150.0">com/linecorp/decaton/processor/runtime/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (30 samples, 6.59%)</title><rect x="583.1" y="1123.0" width="77.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.1" y="1134.0">com/linec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (30 samples, 6.59%)</title><rect x="583.1" y="1107.0" width="77.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.1" y="1118.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (29 samples, 6.37%)</title><rect x="585.7" y="1091.0" width="75.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.7" y="1102.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 1.76%)</title><rect x="585.7" y="1075.0" width="20.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 1.76%)</title><rect x="585.7" y="1059.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 1.76%)</title><rect x="585.7" y="1043.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 1.76%)</title><rect x="585.7" y="1027.0" width="20.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 3.52%)</title><rect x="606.5" y="1075.0" width="41.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.5" y="1086.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (16 samples, 3.52%)</title><rect x="606.5" y="1059.0" width="41.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.5" y="1070.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (16 samples, 3.52%)</title><rect x="606.5" y="1043.0" width="41.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.5" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 1.10%)</title><rect x="648.0" y="1075.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.66%)</title><rect x="660.9" y="1123.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.66%)</title><rect x="660.9" y="1107.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.66%)</title><rect x="660.9" y="1091.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (71 samples, 15.60%)</title><rect x="668.7" y="1123.0" width="184.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="671.7" y="1134.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (71 samples, 15.60%)</title><rect x="668.7" y="1107.0" width="184.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="671.7" y="1118.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.66%)</title><rect x="671.3" y="1091.0" width="7.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="674.3" y="1102.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.66%)</title><rect x="671.3" y="1075.0" width="7.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="674.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (24 samples, 5.27%)</title><rect x="679.1" y="1091.0" width="62.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.1" y="1102.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (17 samples, 3.74%)</title><rect x="686.9" y="1075.0" width="44.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.9" y="1086.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.54%)</title><rect x="702.4" y="1059.0" width="18.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.22%)</title><rect x="715.4" y="1043.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="718.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.22%)</title><rect x="715.4" y="1027.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.22%)</title><rect x="715.4" y="1011.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="718.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.22%)</title><rect x="718.0" y="1043.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="721.0" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.88%)</title><rect x="720.6" y="1059.0" width="10.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="723.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.22%)</title><rect x="731.0" y="1075.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="734.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.22%)</title><rect x="731.0" y="1059.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.0" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.22%)</title><rect x="731.0" y="1043.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="734.0" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.22%)</title><rect x="731.0" y="1027.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="734.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.22%)</title><rect x="731.0" y="1011.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="734.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.22%)</title><rect x="731.0" y="995.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.0" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.22%)</title><rect x="731.0" y="979.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="734.0" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.22%)</title><rect x="731.0" y="963.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.0" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.66%)</title><rect x="733.6" y="1075.0" width="7.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="736.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 1.32%)</title><rect x="741.3" y="1091.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 1.32%)</title><rect x="741.3" y="1075.0" width="15.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="744.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 1.32%)</title><rect x="741.3" y="1059.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="744.3" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (37 samples, 8.13%)</title><rect x="756.9" y="1091.0" width="96.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="759.9" y="1102.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (35 samples, 7.69%)</title><rect x="762.1" y="1075.0" width="90.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.1" y="1086.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.66%)</title><rect x="762.1" y="1059.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="765.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.66%)</title><rect x="762.1" y="1043.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="765.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.66%)</title><rect x="762.1" y="1027.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="765.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.66%)</title><rect x="762.1" y="1011.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.22%)</title><rect x="769.9" y="1059.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="772.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.22%)</title><rect x="769.9" y="1043.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="772.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.22%)</title><rect x="769.9" y="1027.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (31 samples, 6.81%)</title><rect x="772.5" y="1059.0" width="80.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="775.5" y="1070.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (30 samples, 6.59%)</title><rect x="775.1" y="1043.0" width="77.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.1" y="1054.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 2.64%)</title><rect x="821.7" y="1027.0" width="31.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="824.7" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.44%)</title><rect x="834.7" y="1011.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="837.7" y="1022.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 1.10%)</title><rect x="839.9" y="1011.0" width="13.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="842.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (33 samples, 7.25%)</title><rect x="852.9" y="1123.0" width="85.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.9" y="1134.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (33 samples, 7.25%)</title><rect x="852.9" y="1107.0" width="85.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.9" y="1118.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$214/45372172.process (18 samples, 3.96%)</title><rect x="860.6" y="1091.0" width="46.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="863.6" y="1102.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (17 samples, 3.74%)</title><rect x="863.2" y="1075.0" width="44.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="866.2" y="1086.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 3.52%)</title><rect x="863.2" y="1059.0" width="41.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.2" y="1070.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 1.32%)</title><rect x="865.8" y="1043.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.8" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.88%)</title><rect x="871.0" y="1027.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.0" y="1038.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.88%)</title><rect x="871.0" y="1011.0" width="10.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="874.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 1.98%)</title><rect x="881.4" y="1043.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.4" y="1054.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.22%)</title><rect x="904.7" y="1059.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="907.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.22%)</title><rect x="904.7" y="1043.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="907.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.22%)</title><rect x="904.7" y="1027.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.22%)</title><rect x="904.7" y="1011.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.22%)</title><rect x="907.3" y="1091.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="910.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$295/1175404916.complete (1 samples, 0.22%)</title><rect x="909.9" y="1091.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="912.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$67 (1 samples, 0.22%)</title><rect x="909.9" y="1075.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="912.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.22%)</title><rect x="909.9" y="1059.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="912.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.22%)</title><rect x="909.9" y="1043.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="912.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.44%)</title><rect x="912.5" y="1091.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="915.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.44%)</title><rect x="912.5" y="1075.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.44%)</title><rect x="917.7" y="1091.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.44%)</title><rect x="917.7" y="1075.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$293/161932093.get$Lambda (1 samples, 0.22%)</title><rect x="917.7" y="1059.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$295/1175404916.get$Lambda (1 samples, 0.22%)</title><rect x="920.3" y="1059.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="923.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$295/1175404916.&lt;init&gt; (1 samples, 0.22%)</title><rect x="920.3" y="1043.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.3" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 1.10%)</title><rect x="922.9" y="1091.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="925.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.22%)</title><rect x="933.3" y="1075.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="936.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.22%)</title><rect x="935.8" y="1091.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="938.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 1.98%)</title><rect x="938.4" y="1123.0" width="23.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="941.4" y="1134.0">j..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.44%)</title><rect x="943.6" y="1107.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="946.6" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.22%)</title><rect x="946.2" y="1091.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="949.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.10%)</title><rect x="948.8" y="1107.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="951.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.10%)</title><rect x="948.8" y="1091.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$298/1775915697.accept (5 samples, 1.10%)</title><rect x="948.8" y="1075.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (5 samples, 1.10%)</title><rect x="948.8" y="1059.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="951.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$289/1322896339.complete (5 samples, 1.10%)</title><rect x="948.8" y="1043.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="951.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (5 samples, 1.10%)</title><rect x="948.8" y="1027.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="951.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$287/1611817876.complete (5 samples, 1.10%)</title><rect x="948.8" y="1011.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="951.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (5 samples, 1.10%)</title><rect x="948.8" y="995.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 1.10%)</title><rect x="948.8" y="979.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.8" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.10%)</title><rect x="948.8" y="963.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 1.10%)</title><rect x="948.8" y="947.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="951.8" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.88%)</title><rect x="951.4" y="931.0" width="10.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="954.4" y="942.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.88%)</title><rect x="951.4" y="915.0" width="10.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="954.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.22%)</title><rect x="961.8" y="1139.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="964.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.22%)</title><rect x="961.8" y="1123.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="964.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.22%)</title><rect x="961.8" y="1107.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="964.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$298/1775915697.accept (1 samples, 0.22%)</title><rect x="961.8" y="1091.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="964.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (1 samples, 0.22%)</title><rect x="961.8" y="1075.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$289/1322896339.complete (1 samples, 0.22%)</title><rect x="961.8" y="1059.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="964.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (1 samples, 0.22%)</title><rect x="961.8" y="1043.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="964.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$287/1611817876.complete (1 samples, 0.22%)</title><rect x="961.8" y="1027.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (1 samples, 0.22%)</title><rect x="961.8" y="1011.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="964.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (1 samples, 0.22%)</title><rect x="961.8" y="995.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.8" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.22%)</title><rect x="961.8" y="979.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="964.8" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.22%)</title><rect x="961.8" y="963.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="964.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.66%)</title><rect x="964.4" y="1139.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="967.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.22%)</title><rect x="969.6" y="1123.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="972.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.44%)</title><rect x="972.2" y="1155.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="975.2" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.22%)</title><rect x="974.7" y="1139.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="977.7" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.22%)</title><rect x="974.7" y="1123.0" width="2.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="977.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.66%)</title><rect x="977.3" y="1203.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="980.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.66%)</title><rect x="977.3" y="1187.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.22%)</title><rect x="982.5" y="1171.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="985.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 3.08%)</title><rect x="985.1" y="1203.0" width="36.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="988.1" y="1214.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 2.86%)</title><rect x="987.7" y="1187.0" width="33.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="990.7" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.44%)</title><rect x="987.7" y="1171.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="990.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.22%)</title><rect x="987.7" y="1155.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.22%)</title><rect x="987.7" y="1139.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="990.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.22%)</title><rect x="990.3" y="1155.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="993.3" y="1166.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.22%)</title><rect x="990.3" y="1139.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="993.3" y="1150.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.22%)</title><rect x="990.3" y="1123.0" width="2.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="993.3" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.22%)</title><rect x="990.3" y="1107.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 2.42%)</title><rect x="992.9" y="1171.0" width="28.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="995.9" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 2.42%)</title><rect x="992.9" y="1155.0" width="28.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="995.9" y="1166.0">ja..</text>
</g>
<g>
<title>start_thread (65 samples, 14.29%)</title><rect x="1021.4" y="1251.0" width="168.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1024.4" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (65 samples, 14.29%)</title><rect x="1021.4" y="1235.0" width="168.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1024.4" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (65 samples, 14.29%)</title><rect x="1021.4" y="1219.0" width="168.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.4" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65 samples, 14.29%)</title><rect x="1021.4" y="1203.0" width="168.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.4" y="1214.0">JavaThread::thread_mai..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 14.29%)</title><rect x="1021.4" y="1187.0" width="168.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="1198.0">CompileBroker::compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (64 samples, 14.07%)</title><rect x="1024.0" y="1171.0" width="166.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1027.0" y="1182.0">CompileBroker::invoke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (63 samples, 13.85%)</title><rect x="1024.0" y="1155.0" width="163.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.0" y="1166.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (63 samples, 13.85%)</title><rect x="1024.0" y="1139.0" width="163.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1027.0" y="1150.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (27 samples, 5.93%)</title><rect x="1024.0" y="1123.0" width="70.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.0" y="1134.0">Compile:..</text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.32%)</title><rect x="1024.0" y="1107.0" width="15.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.0" y="1118.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.22%)</title><rect x="1024.0" y="1091.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1027.0" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.10%)</title><rect x="1026.6" y="1091.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.6" y="1102.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.88%)</title><rect x="1029.2" y="1075.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.44%)</title><rect x="1031.8" y="1059.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.8" y="1070.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.22%)</title><rect x="1034.4" y="1043.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.4" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.22%)</title><rect x="1034.4" y="1027.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1037.4" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.22%)</title><rect x="1034.4" y="1011.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.4" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.22%)</title><rect x="1037.0" y="1059.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.0" y="1070.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.22%)</title><rect x="1037.0" y="1043.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1040.0" y="1054.0"></text>
</g>
<g>
<title>MachIfNode::MachIfNode() (1 samples, 0.22%)</title><rect x="1037.0" y="1027.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.0" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 4.62%)</title><rect x="1039.6" y="1107.0" width="54.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.6" y="1118.0">Phase..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.22%)</title><rect x="1039.6" y="1091.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.22%)</title><rect x="1042.2" y="1091.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.44%)</title><rect x="1044.8" y="1091.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.22%)</title><rect x="1047.4" y="1075.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.22%)</title><rect x="1047.4" y="1059.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.4" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.22%)</title><rect x="1047.4" y="1043.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.10%)</title><rect x="1050.0" y="1091.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.0" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.22%)</title><rect x="1057.7" y="1075.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.7" y="1086.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.22%)</title><rect x="1060.3" y="1075.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.22%)</title><rect x="1062.9" y="1091.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.66%)</title><rect x="1065.5" y="1091.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.5" y="1102.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.22%)</title><rect x="1065.5" y="1075.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.5" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.44%)</title><rect x="1068.1" y="1075.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.66%)</title><rect x="1073.3" y="1091.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.22%)</title><rect x="1078.5" y="1075.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.5" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.10%)</title><rect x="1081.1" y="1091.0" width="12.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.1" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.22%)</title><rect x="1086.3" y="1075.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.3" y="1086.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.22%)</title><rect x="1086.3" y="1059.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1089.3" y="1070.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.22%)</title><rect x="1086.3" y="1043.0" width="2.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1089.3" y="1054.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.22%)</title><rect x="1086.3" y="1027.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1089.3" y="1038.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.22%)</title><rect x="1086.3" y="1011.0" width="2.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1089.3" y="1022.0"></text>
</g>
<g>
<title>handle_pte_fault (1 samples, 0.22%)</title><rect x="1086.3" y="995.0" width="2.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1089.3" y="1006.0"></text>
</g>
<g>
<title>do_numa_page (1 samples, 0.22%)</title><rect x="1086.3" y="979.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1089.3" y="990.0"></text>
</g>
<g>
<title>migrate_misplaced_page (1 samples, 0.22%)</title><rect x="1086.3" y="963.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1089.3" y="974.0"></text>
</g>
<g>
<title>migrate_pages (1 samples, 0.22%)</title><rect x="1086.3" y="947.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1089.3" y="958.0"></text>
</g>
<g>
<title>move_to_new_page (1 samples, 0.22%)</title><rect x="1086.3" y="931.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1089.3" y="942.0"></text>
</g>
<g>
<title>migrate_page (1 samples, 0.22%)</title><rect x="1086.3" y="915.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1089.3" y="926.0"></text>
</g>
<g>
<title>migrate_page_copy (1 samples, 0.22%)</title><rect x="1086.3" y="899.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1089.3" y="910.0"></text>
</g>
<g>
<title>migrate_page_states (1 samples, 0.22%)</title><rect x="1086.3" y="883.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1089.3" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.44%)</title><rect x="1088.9" y="1075.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.9" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.22%)</title><rect x="1091.5" y="1059.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1094.5" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 5.49%)</title><rect x="1094.0" y="1123.0" width="64.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="1134.0">Compile..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.22%)</title><rect x="1094.0" y="1107.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.0" y="1118.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.22%)</title><rect x="1094.0" y="1091.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.0" y="1102.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.22%)</title><rect x="1094.0" y="1075.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.0" y="1086.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.22%)</title><rect x="1094.0" y="1059.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.0" y="1070.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.22%)</title><rect x="1094.0" y="1043.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.0" y="1054.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.22%)</title><rect x="1094.0" y="1027.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.0" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.22%)</title><rect x="1094.0" y="1011.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.0" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.22%)</title><rect x="1094.0" y="995.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.0" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.44%)</title><rect x="1096.6" y="1107.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.22%)</title><rect x="1099.2" y="1091.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.2" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.22%)</title><rect x="1099.2" y="1075.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.2" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.22%)</title><rect x="1099.2" y="1059.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.44%)</title><rect x="1101.8" y="1107.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.44%)</title><rect x="1101.8" y="1091.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.22%)</title><rect x="1101.8" y="1075.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.22%)</title><rect x="1101.8" y="1059.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.22%)</title><rect x="1104.4" y="1075.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.22%)</title><rect x="1107.0" y="1107.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.0" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.22%)</title><rect x="1107.0" y="1091.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 2.86%)</title><rect x="1109.6" y="1107.0" width="33.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.6" y="1118.0">Ph..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.22%)</title><rect x="1109.6" y="1091.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.44%)</title><rect x="1112.2" y="1091.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 1.98%)</title><rect x="1117.4" y="1091.0" width="23.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.4" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 1.54%)</title><rect x="1122.6" y="1075.0" width="18.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 1.32%)</title><rect x="1125.2" y="1059.0" width="15.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.66%)</title><rect x="1132.9" y="1043.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.22%)</title><rect x="1140.7" y="1091.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.7" y="1102.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.22%)</title><rect x="1140.7" y="1075.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.22%)</title><rect x="1143.3" y="1107.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.22%)</title><rect x="1143.3" y="1091.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.10%)</title><rect x="1145.9" y="1107.0" width="13.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.10%)</title><rect x="1145.9" y="1091.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.9" y="1102.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.22%)</title><rect x="1145.9" y="1075.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.9" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.44%)</title><rect x="1148.5" y="1075.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="1086.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.44%)</title><rect x="1148.5" y="1059.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.5" y="1070.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.44%)</title><rect x="1148.5" y="1043.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.5" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.44%)</title><rect x="1148.5" y="1027.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.22%)</title><rect x="1153.7" y="1075.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.22%)</title><rect x="1156.3" y="1075.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.22%)</title><rect x="1156.3" y="1059.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.3" y="1070.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.22%)</title><rect x="1156.3" y="1043.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 2.20%)</title><rect x="1158.9" y="1123.0" width="25.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.9" y="1134.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 2.20%)</title><rect x="1158.9" y="1107.0" width="25.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="1118.0">P..</text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.22%)</title><rect x="1158.9" y="1091.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 1.98%)</title><rect x="1161.5" y="1091.0" width="23.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="1102.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 1.98%)</title><rect x="1161.5" y="1075.0" width="23.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="1086.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 1.98%)</title><rect x="1161.5" y="1059.0" width="23.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="1070.0">P..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 1.98%)</title><rect x="1161.5" y="1043.0" width="23.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="1054.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.10%)</title><rect x="1161.5" y="1027.0" width="12.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.10%)</title><rect x="1161.5" y="1011.0" width="12.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.10%)</title><rect x="1161.5" y="995.0" width="12.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.10%)</title><rect x="1161.5" y="979.0" width="12.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.10%)</title><rect x="1161.5" y="963.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.88%)</title><rect x="1161.5" y="947.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.66%)</title><rect x="1161.5" y="931.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.66%)</title><rect x="1161.5" y="915.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.66%)</title><rect x="1161.5" y="899.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.66%)</title><rect x="1161.5" y="883.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.66%)</title><rect x="1161.5" y="867.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.66%)</title><rect x="1161.5" y="851.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.66%)</title><rect x="1161.5" y="835.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.66%)</title><rect x="1161.5" y="819.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.66%)</title><rect x="1161.5" y="803.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.66%)</title><rect x="1161.5" y="787.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.66%)</title><rect x="1161.5" y="771.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.66%)</title><rect x="1161.5" y="755.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.44%)</title><rect x="1161.5" y="739.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.44%)</title><rect x="1161.5" y="723.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.44%)</title><rect x="1161.5" y="707.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.44%)</title><rect x="1161.5" y="691.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.44%)</title><rect x="1161.5" y="675.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.44%)</title><rect x="1161.5" y="659.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.5" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.44%)</title><rect x="1161.5" y="643.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.44%)</title><rect x="1161.5" y="627.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.44%)</title><rect x="1161.5" y="611.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.44%)</title><rect x="1161.5" y="595.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.44%)</title><rect x="1161.5" y="579.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.44%)</title><rect x="1161.5" y="563.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1161.5" y="547.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1161.5" y="531.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1161.5" y="515.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1161.5" y="499.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1161.5" y="483.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1161.5" y="467.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1161.5" y="451.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1161.5" y="435.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1161.5" y="419.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1161.5" y="403.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1161.5" y="387.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1161.5" y="371.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1161.5" y="355.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1161.5" y="339.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1161.5" y="323.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1161.5" y="307.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1161.5" y="291.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1161.5" y="275.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1161.5" y="259.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1161.5" y="243.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1161.5" y="227.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1161.5" y="211.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1161.5" y="195.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1161.5" y="179.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1161.5" y="163.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1161.5" y="147.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.5" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1161.5" y="131.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1161.5" y="115.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1161.5" y="99.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1161.5" y="83.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="94.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.22%)</title><rect x="1161.5" y="67.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.5" y="78.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.22%)</title><rect x="1161.5" y="51.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.5" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.22%)</title><rect x="1161.5" y="35.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1164.1" y="547.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.1" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1164.1" y="531.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1164.1" y="515.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1164.1" y="499.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1164.1" y="483.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1164.1" y="467.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1164.1" y="451.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1164.1" y="435.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1164.1" y="419.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1164.1" y="403.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1164.1" y="387.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1164.1" y="371.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1164.1" y="355.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1164.1" y="339.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1164.1" y="323.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1164.1" y="307.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1164.1" y="291.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1164.1" y="275.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1164.1" y="259.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1164.1" y="243.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1164.1" y="227.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1164.1" y="211.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1164.1" y="195.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1164.1" y="179.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1164.1" y="163.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.1" y="174.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.22%)</title><rect x="1164.1" y="147.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.1" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1166.7" y="739.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1166.7" y="723.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1166.7" y="707.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1166.7" y="691.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1166.7" y="675.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1166.7" y="659.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1166.7" y="643.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.7" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.22%)</title><rect x="1166.7" y="627.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.7" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1166.7" y="611.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.22%)</title><rect x="1166.7" y="595.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.22%)</title><rect x="1166.7" y="579.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.22%)</title><rect x="1166.7" y="563.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1166.7" y="547.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1166.7" y="531.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1166.7" y="515.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="1166.7" y="499.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="1166.7" y="483.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.7" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.22%)</title><rect x="1166.7" y="467.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.7" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="1166.7" y="451.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.7" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="1166.7" y="435.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.7" y="446.0"></text>
</g>
<g>
<title>ciConstantPoolCache::get(int) (1 samples, 0.22%)</title><rect x="1166.7" y="419.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.7" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1169.3" y="931.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.22%)</title><rect x="1169.3" y="915.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.22%)</title><rect x="1169.3" y="899.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.22%)</title><rect x="1169.3" y="883.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.22%)</title><rect x="1169.3" y="867.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.22%)</title><rect x="1169.3" y="851.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.22%)</title><rect x="1169.3" y="835.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.3" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.22%)</title><rect x="1169.3" y="819.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.3" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1169.3" y="803.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.3" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.22%)</title><rect x="1169.3" y="787.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.22%)</title><rect x="1169.3" y="771.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.3" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.22%)</title><rect x="1169.3" y="755.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.3" y="766.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.22%)</title><rect x="1169.3" y="739.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.3" y="750.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.22%)</title><rect x="1169.3" y="723.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.3" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.22%)</title><rect x="1171.8" y="947.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="958.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.22%)</title><rect x="1171.8" y="931.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.88%)</title><rect x="1174.4" y="1027.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.88%)</title><rect x="1174.4" y="1011.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.88%)</title><rect x="1174.4" y="995.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.88%)</title><rect x="1174.4" y="979.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.88%)</title><rect x="1174.4" y="963.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.88%)</title><rect x="1174.4" y="947.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.88%)</title><rect x="1174.4" y="931.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.88%)</title><rect x="1174.4" y="915.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.88%)</title><rect x="1174.4" y="899.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.88%)</title><rect x="1174.4" y="883.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.88%)</title><rect x="1174.4" y="867.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.88%)</title><rect x="1174.4" y="851.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.66%)</title><rect x="1174.4" y="835.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.22%)</title><rect x="1174.4" y="819.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.22%)</title><rect x="1174.4" y="803.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.22%)</title><rect x="1174.4" y="787.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.22%)</title><rect x="1174.4" y="771.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.22%)</title><rect x="1174.4" y="755.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1174.4" y="739.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.22%)</title><rect x="1174.4" y="723.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="1174.4" y="707.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.22%)</title><rect x="1174.4" y="691.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.22%)</title><rect x="1174.4" y="675.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="1174.4" y="659.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="1174.4" y="643.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="654.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.22%)</title><rect x="1174.4" y="627.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.22%)</title><rect x="1174.4" y="611.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.22%)</title><rect x="1174.4" y="595.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.44%)</title><rect x="1177.0" y="819.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.44%)</title><rect x="1177.0" y="803.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.44%)</title><rect x="1177.0" y="787.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.44%)</title><rect x="1177.0" y="771.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.44%)</title><rect x="1177.0" y="755.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.44%)</title><rect x="1177.0" y="739.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.44%)</title><rect x="1177.0" y="723.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.44%)</title><rect x="1177.0" y="707.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.44%)</title><rect x="1177.0" y="691.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.44%)</title><rect x="1177.0" y="675.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.44%)</title><rect x="1177.0" y="659.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.0" y="670.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.22%)</title><rect x="1177.0" y="643.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.22%)</title><rect x="1179.6" y="643.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.22%)</title><rect x="1179.6" y="627.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="638.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.22%)</title><rect x="1179.6" y="611.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="622.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.22%)</title><rect x="1179.6" y="595.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.22%)</title><rect x="1182.2" y="835.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.22%)</title><rect x="1182.2" y="819.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.22%)</title><rect x="1182.2" y="803.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar_volatile(int, int, Node*) (1 samples, 0.22%)</title><rect x="1182.2" y="787.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.22%)</title><rect x="1182.2" y="771.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="782.0"></text>
</g>
<g>
<title>MemBarNode::Value(PhaseTransform*) const (1 samples, 0.22%)</title><rect x="1182.2" y="755.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.22%)</title><rect x="1184.8" y="1123.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="1134.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.22%)</title><rect x="1184.8" y="1107.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="1118.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.22%)</title><rect x="1187.4" y="1155.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.4" y="1166.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.22%)</title><rect x="1187.4" y="1139.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1190.4" y="1150.0"></text>
</g>
<g>
<title>system_call_fastpath (1 samples, 0.22%)</title><rect x="1187.4" y="1123.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1190.4" y="1134.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.22%)</title><rect x="1187.4" y="1107.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1190.4" y="1118.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.22%)</title><rect x="1187.4" y="1091.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1190.4" y="1102.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.22%)</title><rect x="1187.4" y="1075.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1190.4" y="1086.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.22%)</title><rect x="1187.4" y="1059.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1190.4" y="1070.0"></text>
</g>
</g>
</svg>
